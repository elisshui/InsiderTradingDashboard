bat file is a plain text file that holds a series of commands that the command line interpreter will run whenever the file is run

--------------------------------------------------------SELLS---------------------------------------------------------------------------
#getting data from insiderarbitrage
import pandas as pd
from datetime import datetime #used to time how long it takes to run the script

def getSells():
    startTime = datetime.now()
    numPages = 3  #number of pages to be scraped
    finalDf = pd.DataFrame()  #final dataframe
    transactionTypes = ['buying', 'sales'] 
    pagesScraped = 0 #num of pages scraped

    for tr in transactionTypes:
        for i in range(numPages): #for evey page
            url = f"https://www.insidearbitrage.com/insider-{tr}/?desk=yes&pagenum={i+1}"  #url of website for certain transaction, page
            df = pd.read_html(url) #reads the html of ^
            df = df[2]
            columns = df.iloc[0] #locating each column in data
            df.columns = columns #assign columns to the dataframe
            df = df[1:] #only want rows from 1st index and lower
            

            if tr == 'buying':
                df['Type'] = 'buy'
            else:
                df['type'] = 'sell'

            frames = [finalDf, df]
            finalDf = pd.concat(frames)
            pagesScraped+=1  #increase num of pages scraped

            print(f'{pagesScraped} Pages Scraped - Total Elasped Time = {datetime.now() - startTime}')  #fstring to see if page was scraped

    finalDf.to_csv('insider.csv') #creating csv file                 
    print(f'CSV File created.\nExecution time: {datetime.now()-startTime}') #prints time taken to run script

-------------------------------------------------------PRICES---------------------------------------------------------

#add real time stick data and moving averages to each row made through sells.py
import sells #importing sells.py file
import pandas as pd
import pandas_datareader as dr
from datetime import datetime, date, timedelta 

sells.getSells() #uncomment to refresh CSV file
df = pd.read_csv('insider.csv', index_col=0) #reading csv file

infoDict = {}  #defining dictionary for tickers
numPeriods = 180  #defining number of periods

startTime = datetime.now()

def getInfo(ticker, nPeriods): #get current stock price -> will calculate MA
    try:
        tickerDf = dr.data.get_data_yahoo(ticker,start = date.today() - timedelta(300) , end = date.today())  #creating a dataframe containing the tickers, past 300 days
        currentPrice = tickerDf.iloc[-1]['Close'] #getting last row - current closing price
        MA = pd.Series(tickerDf["Close"].rolling(nPeriods, min_periods=0).mean(), name = 'MA') #calculating moving average: rolling = rolling sum, calc mean and name value MA
        currentMA = MA[-1]  #last row = the curr MA
        return (currentPrice, currentMA)  #return tuple
    except:
        return ('N/A', 'N/A') #if error occurs, return N/A for price and MA

def getPrice(row):
    ticker = row['Symbol'] #symbol column holds ticker for stock
    if ticker not in infoDict.keys(): #if ticker is not one of the keys in the dictionary, add ticker to dict
        tickerInfo = getInfo(ticker, numPeriods) #get ticker information using getInfo()
        infoDict[ticker] = {} #assign ticker value to another dict
        infoDict[ticker]["Price"] = tickerInfo[0] #in column 0, add price
        infoDict[ticker]["MA"] = tickerInfo[1] #in column 1, add MA
        return infoDict[ticker]["Price"]  #return price of ticker
    else: #ticker already in dictionary
        return infoDict[ticker]["Price"] #return price of ticker

def getMA(row):
    ticker = row['Symbol'] 
    return infoDict[ticker]["MA"] #can simply return this b/c in getPrice() already added MA to infoDict

df['Current Price'] = df.apply(lambda row: getPrice(row), axis = 1) #lambda function - pass in a row, add column called current price and add value getPrice
df['Current Moving Average'] = df.apply(lambda row: getMA(row), axis = 1) #lambda function - pass in a row 
df.to_csv('insiderPrices.csv')
print(f'Prices Gathered - Execution time: {datetime.now()-startTime}')